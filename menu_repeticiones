<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<items>
<item>
<title>[COLOR red]•[/COLOR] [B][COLOR white]ELEMENTUM[/COLOR][COLOR none]     $doregex[elementum]  [/COLOR][/B]</title>
<link>$doregex[install]</link>
<thumbnail>https://i.imgur.com/d1ad1Is.png</thumbnail>
<fanart>https://i.imgur.com/mAe2igo.jpg</fanart>
<regex>
<name>elementum</name>
<expres><![CDATA[#$pyFunction#
def GetLSProData(page_data, Cookie_Jar, m):
    import xbmcvfs
    import xbmcaddon
    import xbmc
    import os
    import requests
    from bs4 import BeautifulSoup

    HOME = xbmcvfs.translatePath('special://home/')
    ADDONS = xbmcvfs.translatePath(os.path.join(HOME, 'addons'))
    ELEMENTUM_ID = "plugin.video.elementum"
    localPath = os.path.join(ADDONS, ELEMENTUM_ID)
    remoteData = requests.get(
        "https://raw.githubusercontent.com/elgatito/plugin.video.elementum/master/addon.xml").text
    remoteSoup = BeautifulSoup(remoteData, "html5lib")

    if (localPath and xbmc.getCondVisibility('System.HasAddon(%s)' % ELEMENTUM_ID)):
        localVersion = xbmcaddon.Addon(ELEMENTUM_ID).getAddonInfo("version")
        remoteVersion = remoteSoup.find("addon").get("version")
        from distutils.version import LooseVersion
        if LooseVersion(remoteVersion) > LooseVersion(localVersion):
            return "[COLOR orange]ACTUALIZACIÓN REQUERIDA[/COLOR]"
        else:
            return "[COLOR lime]INSTALADO[/COLOR]"

    return "[COLOR red]NO INSTALADO[/COLOR]"

]]></expres>
<page></page>
</regex>
<regex>
<name>platforms</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data, Cookie_Jar, m):
    import requests
    import os
    import xbmcvfs
    import xbmcaddon
    import xbmcgui
    import platform as plt
    from bs4 import BeautifulSoup

    ADDON = xbmcaddon.Addon()
    ADDONTITLE = ADDON.getAddonInfo('name')
    HOME = xbmcvfs.translatePath('special://home/')
    ADDONS = os.path.join(HOME, 'addons')
    PACKAGES = os.path.join(HOME, 'packages')

    ELEMENTUM_URL = "https://elementum.surge.sh/getting-started/platforms-page/"
    platforms = dict()
    names = list()
    parentLinks = list()
    system = plt.system()

    data = requests.get(ELEMENTUM_URL).text
    soup = BeautifulSoup(data, "html5lib")
    for item in soup.find_all("tr", {"class": "platform-os"}):
        links = list()

        for link in item.find_all(
                "div", {"class": "platform-asset"}):
            links.append({link.text: link.find("a").get("href")})

        platforms[item.find(
            "td", {"class": "platform-name"}).text.strip().replace("OSx", "Darwin")] = links

    for platform, structures in platforms.items():
        for k, v in {key: value for dictionary in structures for key,
                     value in dictionary.items()}.items():
            if platform != system:
                names.append(
                    f"[COLOR red]{platform}[/COLOR] - [COLOR white]{k}[/COLOR]")
            else:
                names.append(
                    f"[B][COLOR orange]{platform} - {k}[/COLOR][/B]")
            parentLinks.append(v)
    option = xbmcgui.Dialog().select("Selecciona tu plataforma", names)
    if option == -1:
        return xbmcgui.Dialog().notification(ADDON.getAddonInfo('name'), "Selección cancelada", ADDON.getAddonInfo('icon'))
    return str((parentLinks[option], names[option]))

]]></expres>
<page></page>
</regex>
<regex>
<name>install</name>
<expres><![CDATA[#$pyFunction
def GetLSProData(page_data, Cookie_Jar, m):
    import os
    import xbmcvfs
    import xbmcaddon
    import xbmcgui
    import zipfile
    import time
    import urllib.request
    import xbmc
    import re
    import glob
    from datetime import datetime
    from sqlite3 import dbapi2 as database

    ADDON = xbmcaddon.Addon()
    ADDONTITLE = ADDON.getAddonInfo('name')
    HOME = xbmcvfs.translatePath('special://home/')
    ADDONS = os.path.join(HOME, 'addons')
    PACKAGES = os.path.join(ADDONS, 'packages')
    DATABASE = xbmcvfs.translatePath('special://database/')

    def latest_db(db):
        match = glob.glob(os.path.join(DATABASE, '{0}*.db'.format(db)))
        comp = '{0}(.+?).db'.format(db[1:])
        highest = 0
        for file in match:
            try:
                check = int(re.compile(comp).findall(file)[0])
            except:
                check = 0
            if highest < check:
                highest = check
        return '{0}{1}.db'.format(db, highest)

    def addon_database(addon=None, state=1, array=False):
        dbfile = latest_db('Addons')
        dbfile = os.path.join(DATABASE, dbfile)
        installedtime = str(datetime.now())[:-7]

        if os.path.exists(dbfile):
            try:
                textdb = database.connect(dbfile)
                textexe = textdb.cursor()
            except Exception as e:
                return False
        else:
            return False

        if state == 2:
            try:
                textexe.execute(
                    "DELETE FROM installed WHERE addonID = ?", (addon,))
                textdb.commit()
                textexe.close()
            except:
                pass
            return True

        try:
            if not array:
                textexe.execute(
                    'INSERT or IGNORE into installed (addonID , enabled, installDate) VALUES (?,?,?)', (addon, state, installedtime,))
                textexe.execute(
                    'UPDATE installed SET enabled = ? WHERE addonID = ? ', (state, addon,))
            else:
                for item in addon:
                    textexe.execute(
                        'INSERT or IGNORE into installed (addonID , enabled, installDate) VALUES (?,?,?)', (item, state, installedtime,))
                    textexe.execute(
                        'UPDATE installed SET enabled = ? WHERE addonID = ? ', (state, item,))
            textdb.commit()
            textexe.close()
        except Exception as e:
            pass

    class Extracter(object):
        def __init__(self, name, _in, _out):
            dialog = xbmcgui.DialogProgress()
            dialog.create(name, "")
            self.all(_in, _out, dialog)

        def all(self, _in, _out, dp):

            zin = zipfile.ZipFile(_in,  'r')

            nFiles = float(len(zin.infolist()))
            count = 0

            try:
                for item in zin.infolist():
                    count += 1
                    update = count / nFiles * 100
                    dp.update(int(update))
                    zin.extract(item, _out)
            except Exception as e:
                return False

            return True

    class Downloader(object):
        def __init__(self, url, name, dest) -> None:
            self.URL = url
            self.NAME = name
            self.DEST = dest
            self.start_time = time.time()

            dialog = xbmcgui.DialogProgress()
            dialog.create(self.NAME, "")

            urllib.request.urlretrieve(
                url, dest, lambda nb, bs, fs: self.downloadPercentage(nb, bs, fs, dialog, name))

        def downloadPercentage(self, nb, bs, fs, dialog, name):
            messages = list()
            try:
                percent = min(nb * bs * 100 / fs, 100)
                currently_downloaded = float(nb) * bs / (1024 * 1024)
                kbps_speed = nb * bs / (time.time() - self.start_time)
                if kbps_speed > 0:
                    eta = (fs - nb * bs) / kbps_speed
                else:
                    eta = 0
                kbps_speed = kbps_speed / 1024
                total = float(fs) / (1024 * 1024)
                messages.append(f'[B]Descargando {name}...[/B]')
                messages.append('%.02f MB de %.02f MB' %
                                (currently_downloaded, total))
                messages.append('Velocidad: %.02f Kb/s ' % kbps_speed)
                messages.append('Tiempo: %02d:%02d' % divmod(eta, 60))
                dialog.update(int(percent), "\n".join(messages))
            except Exception as _:
                percent = 100
                dialog.update(percent)
                dialog.close()

            if dialog.iscanceled():
                dialog.close()

    platforms = $doregex[platforms]
    
    dest = os.path.join(xbmcvfs.translatePath(PACKAGES),
                        platforms[0].split('/')[-1])
    Downloader(platforms[0], platforms[1], dest)
    Extracter(platforms[1], dest, ADDONS)
    addon_database("plugin.video.elementum", 1)

    xbmc.executebuiltin('UpdateAddonRepos()')
    xbmc.executebuiltin('UpdateLocalAddons()')
    xbmc.executebuiltin('Container.Refresh()')

]]></expres>
<page></page>
</regex>

</item>

<item>
<title>[B][COLOR red]•[/COLOR]  [COLOR white]MOTO GP [/COLOR]  [COLOR red]    2025[/COLOR][/B]</title>
<thumbnail>https://i.imgur.com/4XQ2U5d.png</thumbnail>
<fanart>https://i.imgur.com/5i9xESb.jpg</fanart>
<link>http://ignoreme</link>
<externallink>https://raw.githubusercontent.com/830NY/Tacones/main/motogp25</externallink>
</item>


<item>
<title>[B][COLOR red]•[/COLOR]  [COLOR white]FORMULA 1[/COLOR]  [COLOR red]2024[/COLOR][/B]</title>
<thumbnail>https://i.imgur.com/foCL1Ka.png</thumbnail>
<fanart>https://i.imgur.com/cecGfsO.jpg</fanart>
<link>http://ignoreme</link>
<externallink>https://raw.githubusercontent.com/830NY/Tacones/main/formula_24</externallink>
</item> 


<item>
<title>[B][COLOR red]•[/COLOR]  [COLOR white]MOTO GP [/COLOR]  [COLOR red]    2024[/COLOR][/B]</title>
<thumbnail>https://i.imgur.com/4XQ2U5d.png</thumbnail>
<fanart>https://i.imgur.com/5i9xESb.jpg</fanart>
<link>http://ignoreme</link>
<externallink>https://raw.githubusercontent.com/830NY/Tacones/main/gp_24</externallink>
</item>

<item>
<title>[B][COLOR red]•[/COLOR]  [COLOR white]FORMULA 1[/COLOR]  [COLOR red]2023[/COLOR][/B]</title>
<thumbnail>https://i.imgur.com/BrB93o0.png</thumbnail>
<fanart>https://i.imgur.com/cecGfsO.jpg</fanart>
<link>http://ignoreme</link>
<externallink>https://raw.githubusercontent.com/830NY/Tacones/main/formula_23</externallink>
</item> 

<item>
<title>[B][COLOR red]•[/COLOR]  [COLOR white]MOTO GP [/COLOR]  [COLOR red]    2023[/COLOR][/B]</title>
<thumbnail>https://i.imgur.com/mSkXiky.png</thumbnail>
<fanart>https://i.imgur.com/5i9xESb.jpg</fanart>
<link>http://ignoreme</link>
<externallink>https://raw.githubusercontent.com/830NY/Tacones/main/gp_23</externallink>
</item>

<item>
<title>[B][COLOR red]•[/COLOR]  [COLOR white]UFC 298 [/COLOR]  [COLOR red]    Volkanovski vs Topuria 17/02/24[/COLOR][/B]</title>
<link>plugin://plugin.video.elementum/play?uri=magnet:?xt=urn:btih:804ea6365d464aa778c87bbef1f809adf28ffae9</link>
<thumbnail>https://toppng.com/uploads/preview/ufc-logo-2-ufc-ultimate-fighting-championshi-11563075396l0znixu7hp.png</thumbnail>
<fanart>https://www.hondacenter.com/media/4576/ufc_298_750x430_web.jpg</fanart>
</item>

</items> 

